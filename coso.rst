

Tutorial
========

See the tutorial `here <_docs/tutorial.md>`__















Deploying to a server
=====================

oTree can be deployed on your own server, or using a cloud service like
Heroku.

If you are not experienced with web server administration, Heroku may be
a much simpler option for you, because Heroku automatically handles much
of the configuration. Instructions on how to deploy oTree to Heroku are
`here <#heroku>`__.

Nevertheless, in various situations it will be preferable to run oTree
on your own server. Reasons may include:

-  You do not want your server to be accessed from the internet
-  You will be launching your experiment in a setting where internet
   access is unavailable
-  You want full control over how your server is configured

oTree runs on top of Django, so oTree setup is the same as Django setup.
Django runs on a wide variety of servers, except getting it to run on
Windows may require extra work.

The most typical setup will be a Linux server with Apache. The
instructions for this setup are
`here <https://docs.djangoproject.com/en/1.7/howto/deployment/wsgi/modwsgi/>`__.

If you have been developing your project on your local PC, you should
push your oTree folder to your webserver, e.g. with Git. Then, you
should make sure your webserver has Python installed (possibly in a
``virtualenv``), and do ``pip install -r requirements.txt`` to install
all the dependencies. When you are ready to launch the experiment, you
should set ``OTREE_PRODUCTION`` to ``1``, to turn off ``DEBUG`` mode.

Heroku
------

Here are the steps for deploying to Heroku.

Create an account
~~~~~~~~~~~~~~~~~

Create a free account on `Heroku <https://www.heroku.com/>`__. You can
skip the "Getting Started With Python" guide.

Install the Heroku Toolbelt
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Install the `Heroku Toolbelt <https://toolbelt.heroku.com/>`__.

This provides you access to the Heroku Command Line utility.

Once installed, you can use the ``heroku`` command from your command
shell.

From the oTree launcher, click the terminal button to access the command
shell. Log in using the email address and password you used when
creating your Heroku account:

::

    $ heroku login
    Enter your Heroku credentials.
    Email: python@example.com
    Password:
    Authentication successful.
    Authenticating is required to allow both the heroku and git commands to operate.

Create the Heroku app
~~~~~~~~~~~~~~~~~~~~~

Create an app on Heroku, which prepares Heroku to receive your source
code:

::

    $ heroku create
    Creating lit-bastion-5032 in organization heroku... done, stack is cedar-14
    http://lit-bastion-5032.herokuapp.com/ | https://git.heroku.com/lit-bastion-5032.git
    Git remote heroku added
    When you create an app, a git remote (called heroku) is also created and associated with your local git repository.

Heroku generates a random name (in this case lit-bastion-5032) for your
app, or you can pass a parameter to specify your own app name.

Deploy your code
~~~~~~~~~~~~~~~~

``cd`` to the root directory of your oTree project.

Make sure you have committed any changes as follows:

::

    $ git add .
    $ git commit -am '[commit message]'

(If you get the message
``fatal: Not a git repository (or any of the parent directories): .git``
then you first need to initialize the git repo.)

Then do:

::

    $ git push heroku master
    $ python otree-heroku resetdb myherokuapp

Now visit the app at the URL generated by its app name. As a handy
shortcut, you can open the website as follows:

::

    $ heroku open

To set environment variables
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If it's a production website, you should set the environment variables
(e.g. ``OTREE_PRODUCTION`` and ``OTREE_AUTH_LEVEL``), like this:

.. code:: bash

    heroku config:set OTREE_PRODUCTION=1
    heroku config:set OTREE_AUTH_LEVEL=DEMO

To add an existing remote:
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: bash

    heroku git:remote -a [myherokuapp]

Database setup
--------------

oTree is most frequently used with PostgreSQL as the production
database. You can create your database with a command like this:

``psql -c 'create database django_db;' -U postgres``

Then, you should set the following environment variable, so that it can
be read by ``dj_database_url``:

``DATABASE_URL=postgres://postgres@localhost/django_db``

Amazon Mechanical Turk
======================

Overview
--------

oTree provides integration with Amazon Mechanical Turk (AMT).

You can publish your game to Amazon mechanical Turk directly from
oTree's admin interface. Then, workers on mechanical Turk can accept and
play your app as an MTurk HIT and get paid a participation fee as well
as bonuses they earned by playing your game.

Server requirements
-------------------

Amazon MTurk requires the support of SSL by the server on which you
deploy oTree. That is you should be able to access your server with the
following link ``https://www.myserver.com``.

There are two Out of the Box solutions that oTree supports:

-  running your experiment on oTree local SSL server with the following
   command ``python otree runsslserver``. This SSL server is fully
   compatible with oTree and can be used interchangeably with regular
   server ``python otree runserver``.
-  deploying oTree on Heroku. Heroku by default support SSL. Deploying
   to heroku is explained `here <#heroku>`__.

AWS credentials
---------------

Researchers must have an employer account with AMT, which currently
requires a U.S. address and bank account.

To make payments to participants you need to generate
``AWS_ACCESS_KEY_ID`` and ``AWS_SECRET_ACCESS_KEY``
`here <https://console.aws.amazon.com/iam/home?#security_credential>`__:

.. figure:: http://i.imgur.com/dNhkOiA.png
   :alt: AWS key

   AWS key
On heroku add generated values to your environment variables:

.. code:: bash

    heroku config:set AWS_ACCESS_KEY_ID=YOUR_AWS_ACCESS_KEY_ID
    heroku config:set AWS_SECRET_ACCESS_KEY=YOUR_AWS_SECRET_ACCESS_KEY

Making your session work on MTurk
---------------------------------

You should look in ``settings.py`` for all settings related to
Mechanical Turk (do a search for "mturk"). You can edit the properties
of the HIT such as the title and keywords, as well as the qualifications
required to participate. The monetary reward paid to workers is the
``participation_fee`` for your ``session_type``.

When you publish your HIT to MTurk, it will be visible to workers. When
a worker clicks on the link to take part in the HIT, they will see the
MTurk interface, with your app loaded inside a frame (as an
``ExternalQuestion``). Initially, they will be in preview mode, and will
see the ``preview_template`` you specify in ``settings.py``. After they
accept the HIT, they will see the first page of your session, and be
able to play your session while it is embedded inside a frame in the
MTurk worker interface.

The only modification you should make to your app for it to work on AMT
is to add a ``{% next_button %}`` to the final page that your
participants see. When the participant clicks this button, they will be
directed back to the mechanical Turk website and their work will be
submitted.

After workers have completed the session, you can click on the
"payments" Tab for your session. Here, you will be able to approve
submissions, and also pay the bonuses that workers earned in your game.

Testing your hit in sandbox
---------------------------

The Mechanical Turk Developer Sandbox is a simulated environment that
lets you test Human Intelligence Tasks (HITs) prior to publication in
the marketplace. This environment is available for both
`worker <https://workersandbox.mturk.com/mturk/welcome>`__ and
`requester <https://requester.mturk.com/developer/sandbox>`__.

After publishing the HIT you can test it both as a worker and as a
requester using the links provided on "MTurk" Tab of your session admin
panel. These links will work only locally given that you created your
HIT being on local server(\ ``python otree runsslserver``).

Multiplayer games
-----------------

Games that involve synchronous interaction between participants (i.e.
wait pages) can be tricky on mechanical Turk. First, you should set
``group_by_arrival_time`` as ``True`` so that participants are assigned
to groups in the order in which they arrive, to minimize unnecessary
waiting time.

However, there is still the issue that if one participant drops out then
other participants might be stuck on a wait page. One way to mitigate
this attrition problem is to use a "lock-in" task. In other words,
before your multiplayer game, you can have a subsession that is a
single-player app and takes some effort to complete. The idea is that a
participant takes the effort to complete this initial task, they are
less likely to drop out after that point. Then, the first few
participants to finish the lock in task will be assigned to the same
group in the next subsession, which is the multiplayer game.

An upcoming feature in oTree that has not yet been implemented is the
ability to auto-submit pages if the participant drops out or does not
complete the page in time. This should enable the gameplay to proceed
even if there is attrition.

oTree programming For Django Devs
=================================

Intro to oTree for Django developers
------------------------------------

Differences between oTree and Django
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Models
^^^^^^

-  Field labels should go in the template formfield, rather than the
   model field's ``verbose_name``.
-  ``null=True`` and ``default=None`` are not necessary in your model
   field declarations; in oTree fields are null by default.
-  On ``CharField``\ s, ``max_length`` is not required.

Upgrading/reinstalling oTree
============================

There are several alternatives for upgrading or reinstalling oTree.

(TODO: when to use which)

From-scratch reinstallation
---------------------------

-  On Windows: Browse to \`\ ``%APPDATA%`` and delete the folder
   ``otree-launcher``
-  On Mac/Linux: Delete the folder ``~/.otree-launcher``
-  Re-download the launcher according to the instructions on
   http://www.otree.org/download/

In-place upgrade
----------------

Start the launcher and click the "terminal" button to get your console.
Then type:

::

    git pull https://github.com/oTree-org/oTree.git master
    pip install -r requirements_base.txt
    python otree resetdb

Note: you may get merge conflicts if you have modified many files.

Upgrade oTree core libraries (minimal option)
---------------------------------------------

Start the launcher and click the "terminal" button to get your console.
Then type:

Modify ``otree-core`` version number in ``requirements_base.txt`` (the
latest version is
`here <https://github.com/oTree-org/oTree/blob/master/requirements_base.txt>`__),
then run:

::

    pip install -r requirements_base.txt

