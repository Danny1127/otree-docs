Deploying to a server
=====================

oTree can be deployed on your own server, or using a cloud service like
Heroku.

If you are not experienced with web server administration, Heroku may be
a much simpler option for you, because Heroku automatically handles much
of the configuration. Instructions on how to deploy oTree to Heroku are
`here <#heroku>`__.

Nevertheless, in various situations it will be preferable to run oTree
on your own server. Reasons may include:

-  You do not want your server to be accessed from the internet
-  You will be launching your experiment in a setting where internet
   access is unavailable
-  You want full control over how your server is configured

oTree runs on top of Django, so oTree setup is the same as Django setup.
Django runs on a wide variety of servers, except getting it to run on
Windows may require extra work.

The most typical setup will be a Linux server with Apache. The
instructions for this setup are
`here <https://docs.djangoproject.com/en/1.7/howto/deployment/wsgi/modwsgi/>`__.

If you have been developing your project on your local PC, you should
push your oTree folder to your webserver, e.g. with Git. Then, you
should make sure your webserver has Python installed (possibly in a
``virtualenv``), and do ``pip install -r requirements.txt`` to install
all the dependencies. When you are ready to launch the experiment, you
should set ``OTREE_PRODUCTION`` to ``1``, to turn off ``DEBUG`` mode.

Heroku
------

Here are the steps for deploying to Heroku.

Create an account
~~~~~~~~~~~~~~~~~

Create a free account on `Heroku <https://www.heroku.com/>`__. You can
skip the "Getting Started With Python" guide.

Install the Heroku Toolbelt
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Install the `Heroku Toolbelt <https://toolbelt.heroku.com/>`__.

This provides you access to the Heroku Command Line utility.

Once installed, you can use the ``heroku`` command from your command
shell.

From the oTree launcher, click the terminal button to access the command
shell. Log in using the email address and password you used when
creating your Heroku account:

::

    $ heroku login
    Enter your Heroku credentials.
    Email: python@example.com
    Password:
    Authentication successful.
    Authenticating is required to allow both the heroku and git commands to operate.

Create the Heroku app
~~~~~~~~~~~~~~~~~~~~~

Create an app on Heroku, which prepares Heroku to receive your source
code:

::

    $ heroku create
    Creating lit-bastion-5032 in organization heroku... done, stack is cedar-14
    http://lit-bastion-5032.herokuapp.com/ | https://git.heroku.com/lit-bastion-5032.git
    Git remote heroku added
    When you create an app, a git remote (called heroku) is also created and associated with your local git repository.

Heroku generates a random name (in this case lit-bastion-5032) for your
app, or you can pass a parameter to specify your own app name.

Deploy your code
~~~~~~~~~~~~~~~~

``cd`` to the root directory of your oTree project.

Make sure you have committed any changes as follows:

::

    $ git add .
    $ git commit -am '[commit message]'

(If you get the message
``fatal: Not a git repository (or any of the parent directories): .git``
then you first need to initialize the git repo.)

Then do:

::

    $ git push heroku master
    $ python otree-heroku resetdb myherokuapp

Now visit the app at the URL generated by its app name. As a handy
shortcut, you can open the website as follows:

::

    $ heroku open

To set environment variables
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If it's a production website, you should set the environment variables
(e.g. ``OTREE_PRODUCTION`` and ``OTREE_AUTH_LEVEL``), like this:

.. code-block:: bash

    $ heroku config:set OTREE_PRODUCTION=1
    $ heroku config:set OTREE_AUTH_LEVEL=DEMO

To add an existing remote:
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: bash

    $ heroku git:remote -a [myherokuapp]

Database setup
--------------

oTree is most frequently used with PostgreSQL as the production
database. You can create your database with a command like this:

``psql -c 'create database django_db;' -U postgres``

Then, you should set the following environment variable, so that it can
be read by ``dj_database_url``:

``DATABASE_URL=postgres://postgres@localhost/django_db``

