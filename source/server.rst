Server deployment
=================

oTree can be deployed to a cloud service like
Heroku, or to your own on-premises server.

Heroku
------

If you are not experienced with web server administration, Heroku may be
the simplest option for you. Instructions on how to deploy oTree to Heroku are
`here <#heroku>`__.

Here are the steps for deploying to Heroku.

Create an account
~~~~~~~~~~~~~~~~~

Create a free account on `Heroku <https://www.heroku.com/>`__. You can
skip the "Getting Started With Python" guide.

Install the Heroku Toolbelt
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Install the `Heroku Toolbelt <https://toolbelt.heroku.com/>`__.

This provides you access to the Heroku Command Line utility.

Once installed, you can use the ``heroku`` command from your command
shell.

From the oTree launcher, click the terminal button to access the command
shell. Log in using the email address and password you used when
creating your Heroku account:

::

    $ heroku login
    Enter your Heroku credentials.
    Email: python@example.com
    Password:
    Authentication successful.
    Authenticating is required to allow both the heroku and git commands to operate.

Create the Heroku app
~~~~~~~~~~~~~~~~~~~~~

Create an app on Heroku, which prepares Heroku to receive your source
code:

::

    $ heroku create
    Creating lit-bastion-5032 in organization heroku... done, stack is cedar-14
    http://lit-bastion-5032.herokuapp.com/ | https://git.heroku.com/lit-bastion-5032.git
    Git remote heroku added
    When you create an app, a git remote (called heroku) is also created and associated with your local git repository.

Heroku generates a random name (in this case lit-bastion-5032) for your
app, or you can pass a parameter to specify your own app name.

Deploy your code
~~~~~~~~~~~~~~~~

``cd`` to the root directory of your oTree project.

Make sure you have committed any changes as follows:

::

    $ git add .
    $ git commit -am '[commit message]'

(If you get the message
``fatal: Not a git repository (or any of the parent directories): .git``
then you first need to initialize the git repo.)

Then do:

::

    $ git push heroku master
    $ python otree-heroku resetdb myherokuapp

Go to the `Heroku Dashboard <https://dashboard.heroku.com/apps>`__,
click on your app, click to edit the dynos, and make sure the "worker"
dyno is turned on:

    .. image:: _static/heroku-worker-dyno.JPG

(If you do not see a "worker" entry, make sure your ``Procfile``
looks like `this <https://github.com/oTree-org/oTree/blob/master/Procfile>`__.

Now visit the app at the URL generated by its app name. As a handy
shortcut, you can open the website as follows:

::

    $ heroku open

To set environment variables
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If it's a production website, you should set the environment variables
(e.g. ``OTREE_PRODUCTION`` and ``OTREE_AUTH_LEVEL``), like this:

.. code-block:: bash

    $ heroku config:set OTREE_PRODUCTION=1
    $ heroku config:set OTREE_AUTH_LEVEL=DEMO

To add an existing remote:
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: bash

    $ heroku git:remote -a [myherokuapp]

Deploying to an on-premises server
----------------------------------

Although Heroku deployment may be the easiest option,
you may prefer to run oTree on your own server. Reasons may include:

-  You do not want your server to be accessed from the internet
-  You will be launching your experiment in a setting where internet
   access is unavailable
-  You want full control over how your server is configured

oTree runs on top of Django, so oTree setup is the same as Django setup.
Django runs on a wide variety of servers, except getting it to run on
a Windows server like IIS may require extra work; you can find info about Django + IIS online.
Below, instructions are given for using Unix and Gunicorn.

Database
~~~~~~~~

oTree is most frequently used with PostgreSQL as the production
database, although you can also use MySQL, MariaDB, or any other database supported by Django.

You can create your database with a command like this:

``psql -c 'create database django_db;' -U postgres``

Then, you should set the following environment variable, so that it can
be read by ``dj_database_url``:

``DATABASE_URL=postgres://postgres@localhost/django_db``

Then, instead of installing ``requirements_base.txt``, install ``requirements.txt``.
This will install ``psycopg2``, which is necessary for using Postgres.

You may get an error when you try installing ``psycopg2``,
as described `here <http://initd.org/psycopg/docs/faq.html#problems-compiling-and-deploying-psycopg2>`__.

The fix is to install the ``libpq-dev`` and ``python-dev`` packages.
On Ubuntu/Debian, do:

.. code-block:: bash

    sudo apt-get install libpq-dev python-dev

The command ``python otree resetdb`` only works on SQLite.
On Postgres, you should drop the database and then run ``python otree migrate``.

Running the server
~~~~~~~~~~~~~~~~~~

If you are just testing your app locally, you can use the usual ``runserver`` command.

However, when you want to use oTree in production, you need to run the production server,
which can handle more traffic. You should use a process control system like Supervisord,
and have it launch otree with the command ``python otree runprodserver``.

This will run the ``collectstatic`` command, and then
launch the server as specified in the ``Procfile`` in your project's root directory.
The default ``Procfile`` launches the Gunicorn server.
If you want to use another server like Nginx; you need to modify the
``Procfile``. (If you instead want to use Apache, consult the Django docs.)

.. versionadded:: 0.3.8
   ``runprodserver``


.. warning::

    Gunicorn doesn't work on Windows, so if you are trying to run oTree on a Windows server
    or use ``runprodserver`` locally on your Windows PC, you will need to specify a different
    server in your ``Procfile``.

