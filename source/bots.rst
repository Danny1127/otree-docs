.. _bots:

Bots & automated testing
========================

Your app's ``tests.py`` lets you define "bots" that simulate multiple players simultaneously
playing your app.

Tests with dozens of bots complete with in seconds, and afterward
automated tests can be run to verify correctness of the app (e.g. to
ensure that payoffs are being calculated correctly).

This automated test system saves the programmer the effort of having to
re-test the application every time something is changed.

Starting with oTree 0.8, bots can be run both on the command-line,
and in the browser.

Writing tests
-------------

.. note::

    The syntax for bots has changed as of August 2016. ``self.submit`` has
    been replaced by ``yield``. So, instead of
    ``self.submit(views.Start)``, you should enter ``yield (views.Start)``,
    and instead of ``self.submit(views.Offer, {'offer_amount': 50})``,
    you should do ``yield (views.Offer, {'offer_amount': 50})``. In your code,
    you should do a search-and-replace for ``self.submit(`` and replace it with
    ``yield`` followed by a space.

    The reason for this change in syntax is that using the Python ``yield``
    keyword removes some limitations the bots previously had,
    and helps the bots run more reliably.
    For example, the ``validate_play`` method is no longer required;
    you can now put assert statements directly in ``play_round``.

Tests are contained in your app's ``tests.py``. Fill out the
``play_round()`` method of your ``PlayerBot``. It should simulate each page
submission. For example:

.. code-block:: python

    class PlayerBot(Bot):
        def play_round(self):
            yield (views.Start)
            yield (views.Offer, {'offer_amount': 50})

Here, we first submit the ``Start`` page, which does not contain a form.
The next page is ``Offer``, which contains a form whose field is called
``offer_amount``, which we set to ``50``.

We use ``yield``, because in Python,
``yield`` means to produce or generate a value.
You could think of the bot as a machine that yields (i.e. generates) submissions.

If a page contains several fields, use a dictionary with multiple items:

.. code-block:: python

    yield (views.Offer, {'first_offer_amount': 50, 'second_offer_amount': 150, 'third_offer_amount': 150})


The test system will raise an error if the bot submits invalid input for a page,
or if it submits pages in the wrong order.

Rather than programming many separate bots, you program one bot that can
play any variation of the game, using conditional logic.
For example, here is how you can make a bot that can play either as player 1 or player 2.

.. code-block:: python

    if self.player.id_in_group == 1:
        yield (views.Offer, {'offer': 30})
    else:
        yield (views.Accept, {'offer_accepted': True})

You can condition on ``self.player``, ``self.group``, ``self.subsession``, etc.


Running command-line bots
-------------------------

oTree tests entire sessions, rather that individual apps in isolation.
This is to make sure the entire session runs, just as participants will
play it in the lab.

Let's say you want to test the session named ``ultimatum`` in
``settings.py``. To test, open your terminal
and run the following command from your project's root directory:

.. code-block:: bash

    $ otree test ultimatum

This command will test the session, with the number of participants
specified in ``settings.py``. For example, ``num_bots`` is 30, then when
you run the tests, 30 bots will be instantiated and will play
concurrently.

You can run this command with the ``--export`` flag,
to export the data generated by the bots to a CSV file, e.g.::

    $ otree test ultimatum --export

To run tests for all sessions in ``settings.py``, run:

.. code-block:: bash

    $ otree test

.. _browser-bots:

Browser bots
------------

.. note::

    As of 2016-07-28, the configuration of browser bots has changed
    from when the feature was released a few weeks ago.
    ``--botworker`` was added; ``USE_BROWSER_BOTS = True`` setting was replaced by
    ``'use_browser_bots': True`` in session config; and bot syntax changed from
    ``self.submit()`` to ``yield ()`` as described above.

Starting with oTree 0.8, bots can run in the browser.
They run the same way as command-line bots,
by executing the submits in your ``tests.py``.

However, the advantage is that they test the app in a more full and realistic
way, because they use a real web browser, rather than the simulated command-line
browser. Also, while it's playing you can briefly see
each page and notice if there are visual errors.

Basic use
~~~~~~~~~

-   Make sure you have programmed a bot in your ``tests.py`` as described above
    (preferably using ``yield`` rather than ``self.submit``).
-   In ``settings.py``, set ``'use_browser_bots': True`` for your session config(s).
-   If using Heroku, change your ``Procfile`` so that the ``webandworkers``
    command has a ``--botworker`` flag: ``otree webandworkers --botworker``.
-   Run your server and create a session. The pages will auto-play
    with browser bots, once the start links are opened.

Command-line browser bots (running locally)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For more automated testing, you can use the ``otree browser_bots`` command,
which launches browser bots from the command line.

-   Make sure Google Chrome is installed, or set ``BROWSER_COMMAND`` in ``settings.py``
    (more info below).
-   Run your server (e.g. ``otree runserver``)
-   Close all Chrome windows.
-   Run this (substituting the name of your
    session config)::

    otree browser_bots public_goods

This should automatically launch several Chrome tabs, which will play the game
very quickly. When finished, the tabs will close, and you will see a report in
your terminal window of how long it took.

If Chrome doesn't close windows properly,
make sure you closed all Chrome windows prior to launching the command.


Command-line browser bots on a remote server (e.g. Heroku)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Let's say you want to test your ``public_goods`` session config on
a remote server, such as http://lit-bastion-5032.herokuapp.com/.
It could be Heroku or any other server.

First, read the instructions above for running the command-line launcher
locally.

If using Heroku, change your ``Procfile`` so that the ``webandworkers``
command has a ``--botworker`` flag: ``otree webandworkers --botworker``.

If using ``runprodserver`` (e.g. non-Heroku server), add ``--botworker``
to the ``runprodserver`` command, e.g. ``otree runprodserver --botworker``.

Deploy your code to the server. Then close all Chrome windows,
and then run this command::

    otree browser_bots public_goods --server-url=http://lit-bastion-5032.herokuapp.com

(Don't use ``heroku run``, just execute the command as written above.)


Command-line browser bots: tips & tricks
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

(If the server is running on a host/port other than the usual ``http://127.0.0.1:8000``,
you need to pass ``--server-url`` as shown above.)

If using ``runprodserver`` (e.g. non-Heroku server), add ``--botworker``
to the ``runprodserver`` command, e.g. ``otree runprodserver --botworker``.

You will get the best performance if you use PostgreSQL or MySQL rather than
SQLite, and use ``runprodserver --botworker`` rather than ``runserver``.

On my PC, running the default public_goods session with 3 participants takes about 4-5 seconds,
and with 9 participants takes about 10 seconds.


Choosing session configs and sizes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can specify the number of participants::

    otree browser_bots ultimatum 6

To test all session configs, just run this::

    otree browser_bots

Currently it defaults to ``num_demo_participants`` rather than ``num_bots``
(for performance reasons), but that may change in the future.

Browser bots: misc notes
~~~~~~~~~~~~~~~~~~~~~~~~

You can use a browser other than Chrome by setting ``BROWSER_COMMAND``
in ``settings.py``. Then, oTree will open the browser by doing something like
``subprocess.Popen(settings.BROWSER_COMMAND)``.

(Optional) To make the bots run more quickly, disable most/all add-ons, especially ad-blockers.
Or `create a fresh Chrome profile <https://support.google.com/chrome/answer/142059?hl=en>`__
that you use just for browser testing. When oTree launches Chrome,
it should use the last profile you had open.

Bots tips & tricks
------------------

You can put ``assert`` statements
to check that the correct values are being stored in the database.
For example, if a player's bonus is defined to be 100 minus their
offer, you can check your program is calculating it correctly as
follows:

.. code-block:: python

    yield (views.Offer, {'offer': c(30)})
    assert self.player.bonus == c(70)

You can use random amounts to test that your program can handle any
type of random input::

   ``yield (views.Offer, {'offer': random.randint(0,100)})``


