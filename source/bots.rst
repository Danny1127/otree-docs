Bots & automated testing
========================

Your app's ``tests.py`` lets you define "bots" that simulate multiple players simultaneously
playing your app.

Tests with dozens of bots complete with in seconds, and afterward
automated tests can be run to verify correctness of the app (e.g. to
ensure that payoffs are being calculated correctly).

This automated test system saves the programmer the effort of having to
re-test the application every time something is changed.

Starting with oTree 0.7, bots can be run both on the command-line,
and in the browser.

Writing tests
-------------

.. note::

    The syntax for bots has changed as of August 2016. ``self.submit`` has
    been replaced by ``yield``. So, instead of
    ``self.submit(views.Start)``, you should enter ``yield (views.Start)``,
    and instead of ``self.submit(views.Offer, {'offer_amount': 50})``,
    you should do ``yield (views.Offer, {'offer_amount': 50})``. In your code,
    you should do a search-and-replace for ``self.submit(`` and replace it with
    ``yield `` (note the space after the word 'yield').

    Also, the ``validate_play`` method has been removed. You can now put assert
    statements directly in ``play_round``.

Tests are contained in your app's ``tests.py``. Fill out the
``play_round()`` method of your ``PlayerBot``. It should simulate each page
submission. For example:

.. code-block:: python

    yield (views.Start)
    yield (views.Offer, {'offer_amount': 50})

Here, we first submit the ``Start`` page, which does not contain a form.
The next page is ``Offer``, which contains a form whose field is called
``offer_amount``, which we set to ``50``.

If a page contains several submissions, the synthax looks like

.. code-block:: python

    yield (views.Offer, {'first_offer_amount': 50, 'second_offer_amount': 150, 'third_offer_amount': 150})


The test system will raise an error if the bot submits invalid input for a page,
or if it submits pages in the wrong order.

Rather than programming many separate bots, you program one bot that can
play any variation of the game, using conditional logic.
For example, here is how you can make a bot that can play either as player 1 or player 2.

.. code-block:: python

    if self.player.id_in_group == 1:
        yield (views.Offer, {'offer': 30})
    else:
        yield (views.Accept, {'offer_accepted': True})

You can condition on ``self.player``, ``self.group``, ``self.subsession``, etc.


Running command-line bots
-------------------------

oTree tests entire sessions, rather that individual apps in isolation.
This is to make sure the entire session runs, just as participants will
play it in the lab.

Let's say you want to test the session named ``ultimatum`` in
``settings.py``. To test, open your terminal
and run the following command from your project's root directory:

.. code-block:: bash

    $ otree test ultimatum

This command will test the session, with the number of participants
specified in ``settings.py``. For example, ``num_bots`` is 30, then when
you run the tests, 30 bots will be instantiated and will play
concurrently.

You can run this command with the ``--export`` flag,
to export the data generated by the bots to a CSV file, e.g.::

    $ otree test ultimatum --export

To run tests for all sessions in ``settings.py``, run:

.. code-block:: bash

    $ otree test

.. _browser-bots:

Browser bots (beta)
-------------------

Starting with oTree 0.7, bots can run in the browser.
oTree will open multiple browser windows, and the pages will auto-play.

Browser bots run the same way as command-line bots,
by executing the submits in your ``tests.py``.

However, the advantage is that they test the app in a more full and realistic
way, because they use a real web browser, rather than the simulated command-line
browser. Also, while it's playing you can briefly see
each page and notice if there are visual errors.

First steps
~~~~~~~~~~~

-   Make sure Google Chrome is installed, or set ``BROWSER_COMMAND`` in ``settings.py``
    (more info below).
-   To make the bots run more quickly, disable most/all add-ons, especially ad-blockers.
    Or `create a fresh Chrome profile <https://support.google.com/chrome/answer/142059?hl=en>`__
    that you use just for browser testing. When oTree launches Chrome,
    it should use the last profile you had open.
-   If using Heroku, change your ``Procfile`` so that the ``webandworkers``
    command has a ``--botworker`` flag: ``otree webandworkers --botworker``.
-   If using ``runprodserver`` (e.g. non-Heroku server), add ``--botworker``
    to the ``runprodserver`` command, e.g. ``otree runprodserver --botworker``.

Testing a remote server (e.g. Heroku)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Let's say you want to test your ``public_goods`` session config on
a remote server, such as http://lit-bastion-5032.herokuapp.com/.
It could be Heroku or any other server.
First, deploy and run your server as usual. Then close all Chrome windows,
and then run this command::

    otree browser_bots public_goods --server-url=http://lit-bastion-5032.herokuapp.com

(Don't use ``heroku run``, just execute the command as written above.)

This should automatically launch several Chrome tabs, which will play the game
very quickly. When finished, the tabs will close, and you will see a report in
your terminal window of how long it took.

If Chrome doesn't close windows properly,
make sure you closed all Chrome windows prior to launching the command.

Testing locally
~~~~~~~~~~~~~~~

You can also test a server running on your own machine.
This is faster than using a remote server.
However, you cannot use ``runserver``; you need to use ``runprodserver``
with the special ``--botworker`` arg:
``otree runprodserver --botworker``.
(You can also use the ``--no-collectstatic`` flag to skip
collecting static files each time.)

If possible, try setting up PostgreSQL or MySQL, instead of SQLite.
See instructions for :ref:`Postgres on Windows <postgres-windows>` or
:ref:`Postgres on Linux <postgres-linux>`.
If this is too challenging to configure, you can try with SQLite,
but it may not work reliably.

Close all Chrome windows, then run this command::

    otree browser_bots public_goods

(If the server is running on a host/port other than the usual ``http://127.0.0.1:8000``,
you need to pass ``--server-url`` as shown above.)

On my PC, running the default public_goods session with 3 participants takes about 4-5 seconds,
and with 9 participants takes about 10 seconds.

Choosing session configs and sizes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can specify the number of participants::

    otree browser_bots ultimatum 6

To test all session configs, just run this::

    otree browser_bots

Currently it defaults to ``num_demo_participants`` rather than ``num_bots``
(for performance reasons), but that may change in the future.

Running browser bots on multiple computers
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The ``browser_bots`` command opens many windows on the computer you
launch the command from. However, if you will be running your study in a
computer lab, it may be better to test on the actual lab computers,
with 1 bot running on each computer.

To do this, first create a :ref:`room <room>`.

In ``settings.py``, set ``'use_browser_bots': True`` for your session config(s).
This makes every new session
auto-play with browser bots, once the start links are opened.
Then, open each computer's browser to the room URL (unique URLs or room-wide URL),
whichever you prefer, so that all computers are waiting for the session to
begin. Then, create a session in the room, and all computers will rapidly auto-play.
(Of course, this setting should be turned off once you are ready to launch a real study.)

Browser bots: misc notes
~~~~~~~~~~~~~~~~~~~~~~~~

You can use a browser other than Chrome by setting ``BROWSER_COMMAND``
in ``settings.py``. Then, oTree will open the browser by doing something like
``subprocess.Popen(settings.BROWSER_COMMAND)``.


Bots tips & tricks
------------------

To get the maximal benefit, your bot should thoroughly test all parts of
your code. Here are some ways you can test your app:

-  You can put ``assert`` statements
   to check that the correct values are being stored in the database.
   For example, if a player's bonus is defined to be 100 minus their
   offer, you can check your program is calculating it correctly as
   follows:

   ``yield (views.Offer, {'offer': c(30)})``

   ``assert self.player.bonus == c(70)``

-  You can use random amounts to test that your program can handle any
   type of random input:

   ``yield (views.Offer, {'offer': random.randint(0,100)})``

Bots can either be programmed to simulate playing the game according to
an ordinary strategy, or to test "boundary conditions" (e.g. by entering
invalid input to see if the application correctly rejects it). Or yet
the bot can enter random input on each page.

